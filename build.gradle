version '1.43'

apply plugin: 'java'

archivesBaseName = 'solution-finder'

// Specify encoding of sources
def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'commons-cli:commons-cli:1.5.0'
    testImplementation 'com.google.guava:guava:31.1-jre'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testImplementation 'org.apiguardian:apiguardian-api:1.1.2'
    testImplementation 'org.assertj:assertj-core:3.22.0'
}

jar {
    manifest {
        attributes 'Main-Class': 'Main'
    }

    from {
        configurations.compileClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

def releaseDir = file 'release'
def distributionDir = file 'distribution'
def binaryDir = file 'binary'

task cleanReleaseDir(type: Task) {
    group = 'release'

    doLast {
        delete releaseDir
        releaseDir.mkdir()
    }
}

task copyRelease(type: Task) {
    group = 'release'

    doLast {
        // copy distribution
        copy {
            from distributionDir
            into releaseDir
            exclude '**/.*'
        }

        def jarName = String.format '%s-%s.jar', archivesBaseName, version
        def srcJarFile = file(["build", "libs", jarName].join(File.separator))

        // copy jar
        copy {
            from srcJarFile
            into releaseDir
            rename { file -> 'sfinder.jar' }
        }

        // copy README
        def readmeName = "README.md"
        copy {
            from readmeName
            into releaseDir
        }
    }
}

task copyBinary(type: Task) {
    group = 'release'

    doLast {
        // copy distribution
        copy {
            from binaryDir
            into releaseDir
            exclude '**/.*'
        }
    }
}

task release(type: Zip) {
    group = 'release'

    // dependency
    dependsOn jar, cleanReleaseDir, copyRelease
    copyRelease.mustRunAfter jar, cleanReleaseDir

    from releaseDir
}

task releaseWithBianry(type: Zip) {
    group = 'release'

    // dependency
    dependsOn jar, cleanReleaseDir, copyRelease, copyBinary
    copyRelease.mustRunAfter jar, cleanReleaseDir
    copyBinary.mustRunAfter copyRelease

    from releaseDir
    archiveClassifier.set("GUI")
}

test {
    useJUnitPlatform {
        if (System.getenv("ALLOWS_ALL_TESTS") == "true") {
            println "[useJUnitPlatform] Run all tests"
        } else {
            println "[useJUnitPlatform] Run tests / Exclude tag:long"
            excludeTags 'long'
        }
    }
}